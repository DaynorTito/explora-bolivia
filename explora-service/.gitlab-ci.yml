stages:
  - compile
  - build
  - unit_tests
  - coverage
  - build_image
  - push_image

cache:
  paths:
    - node_modules/
  key: ${CI_COMMIT_REF_SLUG}

compile:
  stage: compile
  image: node:18
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour

build:
  stage: build
  image: node:18
  script:
    - npm ci
    - npm run lint
    - npm run format
  dependencies:
    - compile

unit_tests:
  stage: unit_tests
  image: node:18
  script:
    - npm ci
    - npm run test
  dependencies:
    - compile

coverage:
  stage: coverage
  image: node:18
  script:
    - npm ci
    - npm run test:cov
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  dependencies:
    - compile

build_image:
  stage: build_image
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker save $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA > image.tar # Guarda la imagen
  artifacts:
    paths:
      - image.tar
    expire_in: 1 hour
  dependencies:
    - compile

push_image:
  stage: push_image
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load < image.tar
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  dependencies:
    - build_image
  only:
  - main
  
